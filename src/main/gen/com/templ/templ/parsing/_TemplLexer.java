// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _TemplLexer.flex

package com.templ.templ.parsing;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.*;
import static com.templ.templ.psi.TemplTypes.*;


public class _TemplLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_TEMPL_DECLARATION_START = 2;
  public static final int IN_TEMPL_DECLARATION_BODY = 4;
  public static final int IN_TEMPL_DECLARATION_END = 6;
  public static final int IN_TEMPL_BLOCK_END = 8;
  public static final int IN_BOOL_EXPR = 10;
  public static final int IN_EXPR = 12;
  public static final int IN_IF_STMT = 14;
  public static final int IN_ELSE_IF_STMT = 16;
  public static final int IN_ELSE_STMT = 18;
  public static final int IN_SWITCH_STMT = 20;
  public static final int IN_CASE_STMT = 22;
  public static final int IN_DEFAULT_STMT = 24;
  public static final int IN_FOR_STMT = 26;
  public static final int IN_INLINE_COMPONENT = 28;
  public static final int IN_CHILDREN_BLOCK_START = 30;
  public static final int IN_END_RBRACE = 32;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  3,  4,  5,  6,  6,  7,  7,  8,  8,  9,  9, 10, 10, 
    11, 11, 12, 12, 13, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 
    20, 20
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\31\0"+
    "\1\6\2\0\1\7\1\0\1\10\1\11\40\0\1\12"+
    "\1\0\1\13\1\14\1\15\1\16\1\0\1\17\1\20"+
    "\2\0\1\21\1\22\1\0\1\23\1\24\1\0\1\25"+
    "\1\26\1\27\1\30\1\0\1\31\3\0\1\32\1\0"+
    "\1\33\7\0\1\3\32\0\1\1\u01df\0\1\1\177\0"+
    "\13\1\35\0\2\3\5\0\1\1\57\0\1\1\240\0"+
    "\1\1\377\0\u0100\34";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\25\0\5\1\1\2\1\3\1\1\1\4\5\1\1\5"+
    "\1\6\1\7\1\10\1\6\1\11\1\12\12\1\1\13"+
    "\1\14\1\15\1\16\1\17\1\0\2\20\15\0\1\21"+
    "\1\0\1\22\1\0\2\23\1\0\2\24\1\0\2\25"+
    "\1\0\2\26\6\0\2\27\2\0\2\30\2\0\1\31"+
    "\3\0\1\32\1\0\1\33\1\34\1\35\1\36\2\0"+
    "\1\37\1\0\1\40\3\0\1\41\2\0\1\42\2\0"+
    "\1\43\1\44\1\45\6\0\1\46\6\0\1\47\1\50"+
    "\1\51\1\0\2\52\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\350\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196\0\u01b3"+
    "\0\u01d0\0\u01ed\0\u020a\0\u0227\0\u0244\0\u0261\0\u027e\0\u029b"+
    "\0\u02b8\0\u02d5\0\u0261\0\u02f2\0\u030f\0\u0261\0\u032c\0\u0349"+
    "\0\u0366\0\u0383\0\u03a0\0\u02f2\0\u0261\0\u0261\0\u0261\0\u03bd"+
    "\0\u0261\0\u0261\0\u03da\0\u03f7\0\u0414\0\u0431\0\u044e\0\u046b"+
    "\0\u0488\0\u04a5\0\u04c2\0\u04df\0\u0261\0\u0261\0\u0261\0\u0261"+
    "\0\u0261\0\u04fc\0\u0261\0\u0519\0\u0536\0\u0553\0\u02f2\0\u0570"+
    "\0\u030f\0\u032c\0\u0349\0\u0366\0\u0383\0\u03a0\0\u058d\0\u05aa"+
    "\0\u05c7\0\u0261\0\u05e4\0\u0261\0\u03da\0\u03da\0\u0601\0\u03f7"+
    "\0\u03f7\0\u061e\0\u0414\0\u0414\0\u063b\0\u0431\0\u0431\0\u0658"+
    "\0\u044e\0\u046b\0\u0488\0\u0675\0\u0692\0\u04a5\0\u04a5\0\u06af"+
    "\0\u06cc\0\u04df\0\u04df\0\u06e9\0\u0706\0\u0723\0\u0261\0\u0740"+
    "\0\u075d\0\u077a\0\u0261\0\u0797\0\u03da\0\u03f7\0\u0414\0\u0431"+
    "\0\u07b4\0\u07d1\0\u04a5\0\u07ee\0\u04df\0\u080b\0\u0828\0\u0845"+
    "\0\u0261\0\u0862\0\u087f\0\u0261\0\u089c\0\u08b9\0\u0261\0\u0261"+
    "\0\u08d6\0\u08f3\0\u0910\0\u092d\0\u094a\0\u0967\0\u0984\0\u0261"+
    "\0\u09a1\0\u09be\0\u09db\0\u09f8\0\u0a15\0\u0a32\0\u0261\0\u0261"+
    "\0\u0261\0\u0a4f\0\u0a4f\0\u0a6c\0\u0a4f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\64\26\1\27\37\26\1\30\31\26\1\31\2\26\1\30"+
    "\12\26\1\32\21\26\1\33\1\34\2\26\5\35\2\26"+
    "\1\32\1\36\1\26\1\37\1\40\1\26\1\41\1\26"+
    "\1\42\5\26\1\43\3\26\1\33\1\44\1\26\2\45"+
    "\3\0\26\45\1\46\1\0\2\45\3\0\26\45\1\47"+
    "\1\0\2\45\3\0\3\45\1\50\23\45\1\0\32\26"+
    "\1\51\1\52\33\26\1\53\34\26\1\54\34\26\1\55"+
    "\34\26\1\56\3\26\5\57\5\26\1\60\1\61\15\26"+
    "\1\56\10\26\1\62\42\26\1\63\52\26\1\64\4\26"+
    "\1\65\6\26\1\66\20\26\1\67\2\26\2\45\3\0"+
    "\25\45\1\70\1\45\1\0\2\45\3\0\26\45\1\71"+
    "\53\0\1\72\21\0\2\73\1\74\45\0\1\75\26\0"+
    "\1\76\26\0\5\77\7\0\1\100\20\0\5\101\3\0"+
    "\1\36\1\0\1\102\1\103\1\0\1\104\1\0\1\105"+
    "\5\0\1\106\20\0\1\107\37\0\1\110\42\0\1\111"+
    "\27\0\1\112\47\0\1\113\12\0\1\114\26\0\1\115"+
    "\2\116\1\117\1\115\30\0\1\120\2\121\1\122\1\120"+
    "\30\0\1\123\2\124\1\125\1\123\30\0\1\126\2\127"+
    "\1\130\1\126\30\0\5\131\5\0\1\132\1\133\32\0"+
    "\1\134\37\0\1\135\20\0\1\136\2\137\1\140\1\136"+
    "\44\0\1\141\20\0\1\142\2\143\1\144\1\142\51\0"+
    "\1\145\14\0\1\73\54\0\1\146\44\0\1\147\23\0"+
    "\1\150\41\0\1\151\24\0\1\152\43\0\1\153\27\0"+
    "\1\154\15\0\1\115\1\155\1\116\1\117\1\115\30\0"+
    "\1\120\1\156\1\121\1\122\1\120\30\0\1\123\1\157"+
    "\1\124\1\125\1\123\30\0\1\126\1\160\1\127\1\130"+
    "\1\126\55\0\1\161\24\0\1\162\17\0\1\136\1\163"+
    "\1\137\1\140\1\136\45\0\1\164\17\0\1\142\1\165"+
    "\1\143\1\144\1\142\53\0\1\166\34\0\1\167\36\0"+
    "\1\170\23\0\1\171\31\0\1\172\51\0\1\173\22\0"+
    "\1\174\31\0\1\175\34\0\1\176\43\0\1\177\34\0"+
    "\1\200\30\0\1\201\47\0\1\202\17\0\1\203\51\0"+
    "\1\204\34\0\1\205\11\0\1\206\50\0\1\207\32\0"+
    "\1\210\36\0\1\211\34\0\1\212\33\0\1\213\43\0"+
    "\1\214\34\0\1\215\34\0\1\216\23\0\1\217\24\0"+
    "\1\220\34\0\1\221\34\0\1\222\27\0\1\222\2\223"+
    "\1\224\1\222\30\0\1\222\1\225\1\223\1\224\1\222"+
    "\27\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2697];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\25\0\1\11\4\1\1\11\2\1\1\11\6\1\3\11"+
    "\1\1\2\11\12\1\5\11\1\0\1\11\1\1\15\0"+
    "\1\11\1\0\1\11\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\6\0\2\1\2\0\2\1\2\0"+
    "\1\11\3\0\1\11\1\0\4\1\2\0\1\1\1\0"+
    "\1\1\3\0\1\11\2\0\1\11\2\0\2\11\1\1"+
    "\6\0\1\11\6\0\3\11\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private boolean atEndOfFile = false;
  private int braceNestingLevel = 0;

  public _TemplLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TemplLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              // Without this atEndFile, we get an infinite loop that leads to OOM.
     if (this.atEndOfFile) {
       return null;
     } else {
       this.atEndOfFile = true;
       return GO_ROOT_FRAGMENT;
     }
            }  // fall though
            case 150: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* capture characters until we emit a token */
            }
          // fall through
          case 44: break;
          case 2:
            { yypushback(1);
    yybegin(IN_EXPR);
    return HTML_FRAGMENT;
            }
          // fall through
          case 45: break;
          case 3:
            { yypushback(1);
      yybegin(IN_TEMPL_BLOCK_END);
      return HTML_FRAGMENT;
            }
          // fall through
          case 46: break;
          case 4:
            { yypushback(1);
    yybegin(IN_INLINE_COMPONENT);
    return HTML_FRAGMENT;
            }
          // fall through
          case 47: break;
          case 5:
            { yypushback(1);
    yybegin(IN_TEMPL_DECLARATION_END);
    return HTML_FRAGMENT;
            }
          // fall through
          case 48: break;
          case 6:
            { return BAD_CHARACTER;
            }
          // fall through
          case 49: break;
          case 7:
            { yybegin(YYINITIAL);
    return RBRACE;
            }
          // fall through
          case 50: break;
          case 8:
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return RBRACE;
            }
          // fall through
          case 51: break;
          case 9:
            { braceNestingLevel++;
      if (braceNestingLevel == 1) {
        return LBRACE;
      }
            }
          // fall through
          case 52: break;
          case 10:
            { braceNestingLevel--;
      if (braceNestingLevel == 0) {
          yypushback(1);
          yybegin(IN_END_RBRACE);
          return GO_EXPR;
      }
            }
          // fall through
          case 53: break;
          case 11:
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_INLINE_COMPONENT;
            }
          // fall through
          case 54: break;
          case 12:
            { return INLINE_COMPONENT_START;
            }
          // fall through
          case 55: break;
          case 13:
            { yypushback(1);
        yybegin(IN_CHILDREN_BLOCK_START);
        return GO_INLINE_COMPONENT;
            }
          // fall through
          case 56: break;
          case 14:
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return LBRACE;
            }
          // fall through
          case 57: break;
          case 15:
            { yybegin(IN_TEMPL_DECLARATION_BODY);
    return RBRACE;
            }
          // fall through
          case 58: break;
          case 16:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
    return DECL_GO_TOKEN;
            }
          // fall through
          case 59: break;
          case 17:
            { yypushback(2);
    yybegin(IN_IF_STMT);
    return HTML_FRAGMENT;
            }
          // fall through
          case 60: break;
          case 18:
            { yybegin(IN_EXPR);
      return BOOL_EXPR_START;
            }
          // fall through
          case 61: break;
          case 19:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_IF_START_FRAGMENT;
            }
          // fall through
          case 62: break;
          case 20:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_ELSE_IF_START_FRAGMENT;
            }
          // fall through
          case 63: break;
          case 21:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_ELSE_START_FRAGMENT;
            }
          // fall through
          case 64: break;
          case 22:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_SWITCH_START_FRAGMENT;
            }
          // fall through
          case 65: break;
          case 23:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_CASE_FRAGMENT;
            }
          // fall through
          case 66: break;
          case 24:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_FOR_START_FRAGMENT;
            }
          // fall through
          case 67: break;
          case 25:
            { yypushback(3);
    yybegin(IN_BOOL_EXPR);
    return HTML_FRAGMENT;
            }
          // fall through
          case 68: break;
          case 26:
            { yypushback(3);
    yybegin(IN_FOR_STMT);
    return HTML_FRAGMENT;
            }
          // fall through
          case 69: break;
          case 27:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_IF_START_FRAGMENT;
            }
          // fall through
          case 70: break;
          case 28:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_ELSE_IF_START_FRAGMENT;
            }
          // fall through
          case 71: break;
          case 29:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_ELSE_START_FRAGMENT;
            }
          // fall through
          case 72: break;
          case 30:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_SWITCH_START_FRAGMENT;
            }
          // fall through
          case 73: break;
          case 31:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_CASE_FRAGMENT;
            }
          // fall through
          case 74: break;
          case 32:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_FOR_START_FRAGMENT;
            }
          // fall through
          case 75: break;
          case 33:
            { yypushback(4);
    yybegin(IN_CASE_STMT);
    return HTML_FRAGMENT;
            }
          // fall through
          case 76: break;
          case 34:
            { yypushback(4);
      yybegin(IN_CASE_STMT);
            }
          // fall through
          case 77: break;
          case 35:
            { yypushback(5); // reverse back to start of "templ"
    yybegin(IN_TEMPL_DECLARATION_START);
    return GO_ROOT_FRAGMENT;
            }
          // fall through
          case 78: break;
          case 36:
            { return HTML_DECL_START;
            }
          // fall through
          case 79: break;
          case 37:
            { yypushback(yylength());
    yybegin(IN_ELSE_STMT);
    return HTML_FRAGMENT;
            }
          // fall through
          case 80: break;
          case 38:
            { yypushback(6);
    yybegin(IN_SWITCH_STMT);
    return HTML_FRAGMENT;
            }
          // fall through
          case 81: break;
          case 39:
            { yypushback(yylength());
    yybegin(IN_ELSE_IF_STMT);
    return HTML_FRAGMENT;
            }
          // fall through
          case 82: break;
          case 40:
            { yypushback(8);
    yybegin(IN_DEFAULT_STMT);
    return HTML_FRAGMENT;
            }
          // fall through
          case 83: break;
          case 41:
            { yypushback(8);
      yybegin(IN_DEFAULT_STMT);
            }
          // fall through
          case 84: break;
          case 42:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_DEFAULT_FRAGMENT;
            }
          // fall through
          case 85: break;
          case 43:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_DEFAULT_FRAGMENT;
            }
          // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
