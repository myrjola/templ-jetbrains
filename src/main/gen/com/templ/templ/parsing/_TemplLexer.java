// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _TemplLexer.flex

package com.templ.templ.parsing;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;
import org.bouncycastle.util.Arrays;

import static com.intellij.psi.TokenType.*;
import static com.templ.templ.psi.TemplTypes.*;


public class _TemplLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_TEMPL_DECLARATION_START = 2;
  public static final int IN_TEMPL_DECLARATION_BODY = 4;
  public static final int IN_CSS_DECLARATION_START = 6;
  public static final int IN_CSS_DECLARATION_PARAMS = 8;
  public static final int IN_CSS_DECLARATION_BODY = 10;
  public static final int IN_SCRIPT_DECLARATION_START = 12;
  public static final int IN_SCRIPT_DECLARATION_BODY = 14;
  public static final int IN_BOOL_EXPR = 16;
  public static final int IN_EXPR = 18;
  public static final int IN_COMPONENT_IMPORT = 20;
  public static final int IN_COMPONENT_IMPORT_PARAMS = 22;
  public static final int IN_COMPONENT_IMPORT_PARAMS_END_WITHOUT_CHILDREN = 24;
  public static final int IN_COMPONENT_IMPORT_CHILDREN_BLOCK_START = 26;
  public static final int IN_BLOCK_COMMENT = 28;
  public static final int IN_GO_STRING = 30;
  public static final int IN_GO_RAW_STRING = 32;
  public static final int IN_HTML_COMMENT = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  2,  3,  4,  5,  5,  6,  6,  7,  8,  9,  9, 10, 11, 
    12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 
    20, 20, 21, 21
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\5\0\1\10\1\11\1\12\2\0\1\13\1\14"+
    "\1\15\12\16\1\17\1\0\1\20\1\21\1\22\1\23"+
    "\1\24\32\16\1\0\1\25\2\0\1\16\1\26\1\27"+
    "\1\16\1\30\1\31\1\32\1\33\1\16\1\34\1\35"+
    "\2\16\1\36\1\37\1\16\1\40\1\41\1\16\1\42"+
    "\1\43\1\44\1\45\1\16\1\46\3\16\1\47\1\0"+
    "\1\50\7\0\1\3\32\0\1\1\11\0\1\16\12\0"+
    "\1\16\4\0\1\16\5\0\27\16\1\0\37\16\1\0"+
    "\u01ca\16\4\0\14\16\16\0\5\16\7\0\1\16\1\0"+
    "\1\16\21\0\165\16\1\0\2\16\2\0\4\16\1\0"+
    "\1\16\6\0\1\16\1\0\3\16\1\0\1\16\1\0"+
    "\24\16\1\0\123\16\1\0\213\16\1\0\255\16\1\0"+
    "\46\16\2\0\1\16\6\0\51\16\10\0\55\16\1\0"+
    "\1\16\1\0\2\16\1\0\2\16\1\0\1\16\10\0"+
    "\33\16\4\0\4\16\35\0\13\16\5\0\112\16\4\0"+
    "\146\16\1\0\10\16\2\0\12\16\1\0\23\16\2\0"+
    "\1\16\20\0\73\16\2\0\145\16\16\0\66\16\4\0"+
    "\1\16\2\0\1\16\2\0\56\16\22\0\34\16\4\0"+
    "\13\16\65\0\25\16\1\0\10\16\25\0\17\16\1\0"+
    "\201\16\2\0\12\16\1\0\23\16\1\0\10\16\2\0"+
    "\2\16\2\0\26\16\1\0\7\16\1\0\1\16\3\0"+
    "\4\16\2\0\11\16\2\0\2\16\2\0\4\16\10\0"+
    "\1\16\4\0\2\16\1\0\5\16\2\0\14\16\12\0"+
    "\1\16\1\0\1\16\2\0\3\16\1\0\6\16\4\0"+
    "\2\16\2\0\26\16\1\0\7\16\1\0\2\16\1\0"+
    "\2\16\1\0\2\16\2\0\1\16\1\0\5\16\4\0"+
    "\2\16\2\0\3\16\3\0\1\16\7\0\4\16\1\0"+
    "\1\16\7\0\20\16\13\0\3\16\1\0\11\16\1\0"+
    "\3\16\1\0\26\16\1\0\7\16\1\0\2\16\1\0"+
    "\5\16\2\0\12\16\1\0\3\16\1\0\3\16\2\0"+
    "\1\16\17\0\4\16\2\0\12\16\11\0\7\16\1\0"+
    "\3\16\1\0\10\16\2\0\2\16\2\0\26\16\1\0"+
    "\7\16\1\0\2\16\1\0\5\16\2\0\11\16\2\0"+
    "\2\16\2\0\3\16\10\0\2\16\4\0\2\16\1\0"+
    "\5\16\2\0\12\16\1\0\1\16\20\0\2\16\1\0"+
    "\6\16\3\0\3\16\1\0\4\16\3\0\2\16\1\0"+
    "\1\16\1\0\2\16\3\0\2\16\3\0\3\16\3\0"+
    "\14\16\4\0\5\16\3\0\3\16\1\0\4\16\2\0"+
    "\1\16\6\0\1\16\16\0\12\16\20\0\15\16\1\0"+
    "\3\16\1\0\27\16\1\0\20\16\3\0\10\16\1\0"+
    "\3\16\1\0\4\16\7\0\2\16\1\0\3\16\5\0"+
    "\4\16\2\0\12\16\20\0\4\16\1\0\10\16\1\0"+
    "\3\16\1\0\27\16\1\0\12\16\1\0\5\16\2\0"+
    "\11\16\1\0\3\16\1\0\4\16\7\0\2\16\7\0"+
    "\1\16\1\0\4\16\2\0\12\16\1\0\2\16\15\0"+
    "\4\16\1\0\10\16\1\0\3\16\1\0\63\16\1\0"+
    "\3\16\1\0\5\16\5\0\4\16\7\0\5\16\2\0"+
    "\12\16\12\0\6\16\2\0\2\16\1\0\22\16\3\0"+
    "\30\16\1\0\11\16\1\0\1\16\2\0\7\16\3\0"+
    "\1\16\4\0\6\16\1\0\1\16\1\0\10\16\6\0"+
    "\12\16\2\0\2\16\15\0\72\16\5\0\17\16\1\0"+
    "\12\16\47\0\2\16\1\0\1\16\1\0\5\16\1\0"+
    "\30\16\1\0\1\16\1\0\27\16\2\0\5\16\1\0"+
    "\1\16\1\0\6\16\2\0\12\16\2\0\4\16\40\0"+
    "\1\16\27\0\2\16\6\0\12\16\13\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\12\16\1\0\44\16\4\0"+
    "\24\16\1\0\22\16\1\0\44\16\11\0\1\16\71\0"+
    "\112\16\6\0\116\16\2\0\46\16\1\0\1\16\5\0"+
    "\1\16\2\0\53\16\1\0\115\16\1\0\4\16\2\0"+
    "\7\16\1\0\1\16\1\0\4\16\2\0\51\16\1\0"+
    "\4\16\2\0\41\16\1\0\4\16\2\0\7\16\1\0"+
    "\1\16\1\0\4\16\2\0\17\16\1\0\71\16\1\0"+
    "\4\16\2\0\103\16\2\0\3\16\40\0\20\16\20\0"+
    "\126\16\2\0\6\16\3\0\u016c\16\2\0\21\16\1\1"+
    "\32\16\5\0\113\16\3\0\13\16\7\0\15\16\1\0"+
    "\7\16\13\0\25\16\13\0\24\16\14\0\15\16\1\0"+
    "\3\16\1\0\2\16\14\0\124\16\3\0\1\16\4\0"+
    "\2\16\2\0\12\16\41\0\3\16\2\0\12\16\6\0"+
    "\131\16\7\0\53\16\5\0\106\16\12\0\37\16\1\0"+
    "\14\16\4\0\14\16\12\0\50\16\2\0\5\16\13\0"+
    "\54\16\4\0\32\16\6\0\12\16\46\0\34\16\4\0"+
    "\77\16\1\0\35\16\2\0\13\16\6\0\12\16\15\0"+
    "\1\16\10\0\17\16\101\0\114\16\4\0\12\16\21\0"+
    "\11\16\14\0\164\16\14\0\70\16\10\0\12\16\3\0"+
    "\61\16\2\0\11\16\7\0\53\16\2\0\3\16\20\0"+
    "\3\16\1\0\47\16\5\0\372\16\1\0\33\16\2\0"+
    "\6\16\2\0\46\16\2\0\6\16\2\0\10\16\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\1\0\37\16\2\0"+
    "\65\16\1\0\7\16\1\0\1\16\3\0\3\16\1\0"+
    "\7\16\3\0\4\16\2\0\6\16\4\0\15\16\5\0"+
    "\3\16\1\0\7\16\3\0\13\1\35\0\2\3\5\0"+
    "\1\1\17\0\2\16\23\0\1\16\12\0\1\1\21\0"+
    "\1\16\15\0\1\16\20\0\15\16\63\0\41\16\21\0"+
    "\1\16\4\0\1\16\2\0\12\16\1\0\1\16\3\0"+
    "\5\16\6\0\1\16\1\0\1\16\1\0\1\16\1\0"+
    "\4\16\1\0\13\16\2\0\4\16\5\0\5\16\4\0"+
    "\1\16\21\0\51\16\u022d\0\64\16\26\0\57\16\1\0"+
    "\57\16\1\0\205\16\6\0\11\16\14\0\46\16\1\0"+
    "\1\16\5\0\1\16\2\0\70\16\7\0\1\16\17\0"+
    "\30\16\11\0\7\16\1\0\7\16\1\0\7\16\1\0"+
    "\7\16\1\0\7\16\1\0\7\16\1\0\7\16\1\0"+
    "\7\16\1\0\40\16\57\0\1\16\320\0\1\1\4\0"+
    "\3\16\31\0\17\16\1\0\5\16\2\0\5\16\4\0"+
    "\126\16\2\0\2\16\2\0\3\16\1\0\132\16\1\0"+
    "\4\16\5\0\53\16\1\0\136\16\21\0\33\16\65\0"+
    "\306\16\112\0\360\16\20\0\215\16\103\0\56\16\2\0"+
    "\15\16\3\0\34\16\24\0\63\16\1\0\12\16\1\0"+
    "\163\16\45\0\11\16\2\0\147\16\2\0\65\16\2\0"+
    "\5\16\60\0\61\16\30\0\64\16\14\0\106\16\12\0"+
    "\12\16\6\0\30\16\3\0\1\16\1\0\61\16\2\0"+
    "\44\16\14\0\35\16\3\0\101\16\16\0\13\16\6\0"+
    "\37\16\1\0\67\16\11\0\16\16\2\0\12\16\6\0"+
    "\27\16\3\0\111\16\30\0\3\16\2\0\20\16\2\0"+
    "\5\16\12\0\6\16\2\0\6\16\2\0\6\16\11\0"+
    "\7\16\1\0\7\16\1\0\53\16\1\0\14\16\10\0"+
    "\173\16\1\0\2\16\2\0\12\16\6\0\244\16\14\0"+
    "\27\16\4\0\61\16\4\0\u0100\51\156\16\2\0\152\16"+
    "\46\0\7\16\14\0\5\16\5\0\14\16\1\0\15\16"+
    "\1\0\5\16\1\0\1\16\1\0\2\16\1\0\2\16"+
    "\1\0\154\16\41\0\153\16\22\0\100\16\2\0\66\16"+
    "\50\0\14\16\4\0\20\16\20\0\20\16\3\0\2\16"+
    "\30\0\3\16\40\0\5\16\1\0\207\16\23\0\12\16"+
    "\7\0\32\16\4\0\1\16\1\0\32\16\13\0\131\16"+
    "\3\0\6\16\2\0\6\16\2\0\6\16\2\0\3\16"+
    "\43\0\14\16\1\0\32\16\1\0\23\16\1\0\2\16"+
    "\1\0\17\16\2\0\16\16\42\0\173\16\105\0\65\16"+
    "\210\0\1\16\202\0\35\16\3\0\61\16\17\0\1\16"+
    "\37\0\40\16\15\0\36\16\5\0\53\16\5\0\36\16"+
    "\2\0\44\16\4\0\10\16\1\0\5\16\52\0\236\16"+
    "\2\0\12\16\6\0\44\16\4\0\44\16\4\0\50\16"+
    "\10\0\64\16\234\0\67\16\11\0\26\16\12\0\10\16"+
    "\230\0\6\16\2\0\1\16\1\0\54\16\1\0\2\16"+
    "\3\0\1\16\2\0\27\16\12\0\27\16\11\0\37\16"+
    "\101\0\23\16\1\0\2\16\12\0\26\16\12\0\32\16"+
    "\106\0\70\16\6\0\2\16\100\0\4\16\1\0\2\16"+
    "\5\0\10\16\1\0\3\16\1\0\35\16\2\0\3\16"+
    "\4\0\1\16\40\0\35\16\3\0\35\16\43\0\10\16"+
    "\1\0\36\16\31\0\66\16\12\0\26\16\12\0\23\16"+
    "\15\0\22\16\156\0\111\16\67\0\63\16\15\0\63\16"+
    "\15\0\50\16\10\0\12\16\306\0\35\16\12\0\1\16"+
    "\10\0\41\16\217\0\27\16\11\0\107\16\37\0\12\16"+
    "\17\0\74\16\25\0\31\16\7\0\12\16\6\0\65\16"+
    "\1\0\12\16\4\0\3\16\11\0\44\16\2\0\1\16"+
    "\11\0\105\16\4\0\4\16\3\0\13\16\1\0\1\16"+
    "\43\0\22\16\1\0\45\16\6\0\1\16\101\0\7\16"+
    "\1\0\1\16\1\0\4\16\1\0\17\16\1\0\12\16"+
    "\7\0\73\16\5\0\12\16\6\0\4\16\1\0\10\16"+
    "\2\0\2\16\2\0\26\16\1\0\7\16\1\0\2\16"+
    "\1\0\5\16\1\0\12\16\2\0\2\16\2\0\3\16"+
    "\2\0\1\16\6\0\1\16\5\0\7\16\2\0\7\16"+
    "\3\0\5\16\213\0\113\16\5\0\12\16\4\0\2\16"+
    "\40\0\106\16\1\0\1\16\10\0\12\16\246\0\66\16"+
    "\2\0\11\16\27\0\6\16\42\0\101\16\3\0\1\16"+
    "\13\0\12\16\46\0\71\16\7\0\12\16\66\0\33\16"+
    "\2\0\17\16\4\0\12\16\306\0\73\16\145\0\112\16"+
    "\25\0\1\16\240\0\10\16\2\0\56\16\2\0\10\16"+
    "\1\0\2\16\33\0\77\16\10\0\1\16\10\0\112\16"+
    "\3\0\1\16\42\0\71\16\7\0\11\16\1\0\55\16"+
    "\1\0\11\16\17\0\12\16\30\0\36\16\2\0\26\16"+
    "\1\0\16\16\111\0\7\16\1\0\2\16\1\0\54\16"+
    "\3\0\1\16\1\0\2\16\1\0\11\16\10\0\12\16"+
    "\6\0\6\16\1\0\2\16\1\0\45\16\1\0\2\16"+
    "\1\0\6\16\7\0\12\16\u0136\0\27\16\11\0\232\16"+
    "\146\0\157\16\21\0\304\16\274\0\57\16\321\0\107\16"+
    "\271\0\71\16\7\0\37\16\1\0\12\16\146\0\36\16"+
    "\2\0\5\16\13\0\67\16\11\0\4\16\14\0\12\16"+
    "\11\0\25\16\5\0\23\16\260\0\100\16\200\0\113\16"+
    "\4\0\71\16\7\0\21\16\100\0\2\16\1\0\1\16"+
    "\34\0\370\16\10\0\363\16\15\0\37\16\61\0\3\16"+
    "\21\0\4\16\10\0\u018c\16\4\0\153\16\5\0\15\16"+
    "\3\0\11\16\7\0\12\16\3\0\2\16\306\0\5\16"+
    "\3\0\6\16\10\0\10\16\2\0\7\16\36\0\4\16"+
    "\224\0\3\16\273\0\125\16\1\0\107\16\1\0\2\16"+
    "\2\0\1\16\2\0\2\16\2\0\4\16\1\0\14\16"+
    "\1\0\1\16\1\0\7\16\1\0\101\16\1\0\4\16"+
    "\2\0\10\16\1\0\7\16\1\0\34\16\1\0\4\16"+
    "\1\0\5\16\1\0\1\16\3\0\7\16\1\0\u0154\16"+
    "\2\0\31\16\1\0\31\16\1\0\37\16\1\0\31\16"+
    "\1\0\37\16\1\0\31\16\1\0\37\16\1\0\31\16"+
    "\1\0\37\16\1\0\31\16\1\0\10\16\2\0\151\16"+
    "\4\0\62\16\10\0\1\16\16\0\1\16\26\0\5\16"+
    "\1\0\17\16\120\0\7\16\1\0\21\16\2\0\7\16"+
    "\1\0\2\16\1\0\5\16\325\0\55\16\3\0\16\16"+
    "\2\0\12\16\4\0\1\16\u0171\0\72\16\6\0\305\16"+
    "\13\0\7\16\51\0\114\16\4\0\12\16\246\0\4\16"+
    "\1\0\33\16\1\0\2\16\1\0\1\16\2\0\1\16"+
    "\1\0\12\16\1\0\4\16\1\0\1\16\1\0\1\16"+
    "\6\0\1\16\4\0\1\16\1\0\1\16\1\0\1\16"+
    "\1\0\3\16\1\0\2\16\1\0\1\16\2\0\1\16"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\1\0\2\16\1\0\1\16\2\0\4\16\1\0\7\16"+
    "\1\0\4\16\1\0\4\16\1\0\1\16\1\0\12\16"+
    "\1\0\21\16\5\0\3\16\1\0\5\16\1\0\21\16"+
    "\164\0\32\16\6\0\32\16\6\0\32\16\166\0\327\16"+
    "\51\0\65\16\13\0\336\16\2\0\u0182\16\16\0\u0131\16"+
    "\37\0\36\16\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\26\0\1\1\1\2\1\1\1\3\3\1\3\4\5\5"+
    "\1\6\1\7\1\5\1\10\5\5\1\11\1\12\1\13"+
    "\1\14\1\12\1\15\1\12\1\16\1\17\1\20\1\16"+
    "\2\21\1\11\3\22\2\23\1\24\2\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\32\1\34\1\35\1\36"+
    "\3\37\1\40\1\41\2\40\1\5\1\42\1\43\3\0"+
    "\2\44\20\0\2\45\2\46\1\47\1\0\1\50\1\51"+
    "\1\52\1\0\1\53\3\0\1\54\6\0\1\55\2\0"+
    "\1\56\4\0\2\57\2\0\1\60\4\0\1\61\1\0"+
    "\1\62\3\0\2\63\1\0\2\64\2\0\2\65\1\66"+
    "\1\0\1\67\2\0\1\70\3\0\2\71\1\72\2\73"+
    "\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u039c"+
    "\0\u03c6\0\u039c\0\u03f0\0\u041a\0\u0444\0\u039c\0\u03c6\0\u046e"+
    "\0\u039c\0\u03c6\0\u0498\0\u04c2\0\u04ec\0\u039c\0\u0516\0\u0540"+
    "\0\u039c\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\u0516\0\u039c"+
    "\0\u063c\0\u039c\0\u03c6\0\u0666\0\u0690\0\u039c\0\u039c\0\u039c"+
    "\0\u03c6\0\u039c\0\u03c6\0\u039c\0\u039c\0\u03c6\0\u06ba\0\u039c"+
    "\0\u03c6\0\u039c\0\u039c\0\u03c6\0\u039c\0\u039c\0\u06e4\0\u039c"+
    "\0\u039c\0\u070e\0\u03c6\0\u039c\0\u039c\0\u039c\0\u039c\0\u0738"+
    "\0\u03c6\0\u039c\0\u039c\0\u03c6\0\u0762\0\u078c\0\u039c\0\u07b6"+
    "\0\u07e0\0\u080a\0\u0834\0\u039c\0\u085e\0\u0888\0\u04c2\0\u08b2"+
    "\0\u0516\0\u08dc\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612"+
    "\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae\0\u039c\0\u09d8\0\u039c"+
    "\0\u0a02\0\u039c\0\u070e\0\u039c\0\u039c\0\u039c\0\u0a2c\0\u039c"+
    "\0\u0a56\0\u0a80\0\u0aaa\0\u039c\0\u0ad4\0\u0afe\0\u0b28\0\u0b52"+
    "\0\u0b7c\0\u0ba6\0\u039c\0\u0bd0\0\u0bfa\0\u039c\0\u0c24\0\u0c4e"+
    "\0\u0c78\0\u0ca2\0\u039c\0\u0ccc\0\u0cf6\0\u0d20\0\u039c\0\u0d4a"+
    "\0\u0d74\0\u0d9e\0\u0dc8\0\u039c\0\u0df2\0\u039c\0\u0e1c\0\u0e46"+
    "\0\u0e70\0\u0d74\0\u0e9a\0\u0ec4\0\u039c\0\u0eee\0\u0f18\0\u0f42"+
    "\0\u0e70\0\u0f6c\0\u0d74\0\u0f96\0\u039c\0\u0fc0\0\u0fea\0\u0e70"+
    "\0\u1014\0\u103e\0\u1068\0\u1014\0\u1092\0\u039c\0\u039c\0\u10bc"+
    "\0\u1014\0\u039c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\27\1\30\5\27\1\31\10\27\1\32\32\27\1\30"+
    "\5\27\1\31\10\27\1\32\1\27\1\33\12\27\1\34"+
    "\1\35\5\27\7\36\1\30\5\36\1\37\10\36\1\32"+
    "\20\36\1\40\2\36\15\41\1\42\2\41\1\43\1\41"+
    "\1\44\1\45\23\41\1\46\1\47\2\41\5\50\7\41"+
    "\1\42\2\41\1\43\1\41\1\44\1\45\1\51\3\41"+
    "\1\52\1\53\1\41\1\54\1\41\1\55\5\41\1\56"+
    "\3\41\1\46\1\57\1\41\1\60\5\61\2\60\1\62"+
    "\4\60\1\63\1\64\10\60\20\64\1\65\2\60\10\66"+
    "\1\67\1\70\3\66\1\71\34\66\15\72\1\73\51\72"+
    "\1\73\32\72\1\74\1\72\15\75\1\76\31\75\1\77"+
    "\2\75\15\100\1\101\51\100\1\101\32\100\1\102\1\100"+
    "\15\60\1\63\34\60\7\103\1\30\5\103\1\104\10\103"+
    "\1\32\20\103\1\105\1\106\1\103\14\60\1\107\1\63"+
    "\1\107\5\60\1\110\2\60\20\107\3\60\7\111\1\30"+
    "\1\67\1\112\3\111\1\113\10\111\1\32\23\111\11\60"+
    "\1\114\3\60\1\63\35\60\5\61\3\60\1\115\3\60"+
    "\1\63\31\60\1\116\2\60\12\117\1\120\2\117\1\121"+
    "\34\117\2\122\3\60\2\122\1\123\5\122\1\124\7\122"+
    "\1\125\23\122\1\60\15\122\1\124\10\122\1\123\23\122"+
    "\13\41\1\126\1\41\1\42\34\41\64\0\1\127\2\0"+
    "\1\130\77\0\1\131\36\0\1\132\53\0\1\133\21\0"+
    "\2\134\1\135\53\0\1\136\44\0\5\137\16\0\1\51"+
    "\46\0\1\140\31\0\5\141\24\0\1\142\20\0\5\143"+
    "\16\0\1\51\3\0\1\144\1\145\1\0\1\146\1\0"+
    "\1\147\5\0\1\150\35\0\1\151\54\0\1\152\57\0"+
    "\1\153\44\0\1\154\64\0\1\155\4\0\5\61\62\0"+
    "\1\64\10\0\20\64\5\0\2\156\1\157\47\0\2\160"+
    "\1\161\55\0\1\162\3\0\1\107\1\0\1\107\10\0"+
    "\20\107\4\0\5\163\41\0\1\164\17\0\1\165\43\0"+
    "\1\166\55\0\1\167\36\0\2\130\3\0\44\130\44\0"+
    "\1\170\50\0\1\171\46\0\1\172\14\0\1\134\62\0"+
    "\1\173\105\0\1\174\40\0\1\175\56\0\1\176\41\0"+
    "\1\177\60\0\1\200\7\0\47\154\1\201\2\154\35\0"+
    "\1\202\16\0\1\156\51\0\1\160\71\0\1\203\64\0"+
    "\1\204\55\0\1\205\23\0\1\206\101\0\1\207\40\0"+
    "\1\210\46\0\1\211\23\0\5\212\46\0\2\213\1\214"+
    "\111\0\1\215\46\0\1\216\46\0\1\217\45\0\1\220"+
    "\17\0\17\210\1\221\32\210\45\0\1\222\4\0\47\212"+
    "\1\223\2\212\2\0\1\224\77\0\1\225\65\0\1\226"+
    "\6\0\4\227\1\230\41\0\1\231\3\0\1\221\2\232"+
    "\1\233\1\221\102\0\1\234\15\0\2\235\1\236\101\0"+
    "\1\237\16\0\5\227\41\0\1\231\3\0\5\227\27\0"+
    "\1\240\11\0\1\231\3\0\1\231\2\241\1\242\1\231"+
    "\45\0\1\221\1\243\1\232\1\233\1\221\110\0\1\244"+
    "\7\0\1\245\50\0\5\246\77\0\1\247\17\0\1\231"+
    "\1\250\1\241\1\242\1\231\63\0\1\251\32\0\47\246"+
    "\1\252\2\246\47\247\1\253\2\247\1\0\1\251\2\254"+
    "\1\255\1\251\44\0\2\246\1\256\44\246\1\252\2\246"+
    "\2\0\2\257\1\260\46\0\1\251\1\261\1\254\1\255"+
    "\1\251\46\0\1\262\47\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4326];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\26\0\2\11\1\1\1\11\3\1\1\11\2\1\1\11"+
    "\4\1\1\11\2\1\1\11\6\1\1\11\1\1\1\11"+
    "\3\1\3\11\1\1\1\11\1\1\2\11\2\1\1\11"+
    "\1\1\2\11\1\1\2\11\1\1\2\11\2\1\4\11"+
    "\2\1\2\11\3\1\1\11\1\1\3\0\1\11\1\1"+
    "\20\0\1\11\1\1\1\11\1\1\1\11\1\0\3\11"+
    "\1\0\1\11\3\0\1\11\6\0\1\11\2\0\1\11"+
    "\4\0\1\11\1\1\2\0\1\11\4\0\1\11\1\0"+
    "\1\11\3\0\2\1\1\0\1\11\1\1\2\0\3\1"+
    "\1\0\1\11\2\0\1\1\3\0\2\1\2\11\2\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private int braceNestingLevel = 0;
    private int parensNestingLevel = 0;
    private int previousState = -1;

    public void yyPushState(int newState) {
        previousState = yystate();
        yybegin(newState);
    }

    public void yyPopState() { // We only remember one level of state.
        if (previousState == -1) {
          throw new IllegalStateException("No previous state to pop");
        }
        yybegin(previousState);
        previousState = -1;
    }

    public boolean isCommentEnabled() {
        return !Arrays.contains(new int[]{IN_BLOCK_COMMENT, IN_GO_STRING, IN_GO_RAW_STRING}, yystate());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TemplLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return GO_ROOT_FRAGMENT;
            }
          // fall through
          case 62: break;
          case 2:
            { yyPushState(IN_GO_STRING);
            }
          // fall through
          case 63: break;
          case 3:
            { yyPushState(IN_GO_RAW_STRING);
            }
          // fall through
          case 64: break;
          case 4:
            { return DECL_GO_TOKEN;
            }
          // fall through
          case 65: break;
          case 5:
            { return HTML_FRAGMENT;
            }
          // fall through
          case 66: break;
          case 6:
            { yypushback(1); // IN_EXPR handles brace nesting
        yyPushState(IN_EXPR);
            }
          // fall through
          case 67: break;
          case 7:
            { return RBRACE;
            }
          // fall through
          case 68: break;
          case 8:
            { yypushback(1);
        yyPushState(IN_COMPONENT_IMPORT);
        return HTML_FRAGMENT;
            }
          // fall through
          case 69: break;
          case 9:
            { yyPushState(YYINITIAL);
        return RBRACE;
            }
          // fall through
          case 70: break;
          case 10:
            { yybegin(YYINITIAL);
    return BAD_CHARACTER;
            }
          // fall through
          case 71: break;
          case 11:
            { return WHITE_SPACE;
            }
          // fall through
          case 72: break;
          case 12:
            { yypushback(1); // IN_CSS_DECLARATION_PARAMS handles parens nesting
        yyPushState(IN_CSS_DECLARATION_PARAMS);
            }
          // fall through
          case 73: break;
          case 13:
            { return CSS_CLASS_ID;
            }
          // fall through
          case 74: break;
          case 14:
            { return GO_CSS_DECL_PARAMS;
            }
          // fall through
          case 75: break;
          case 15:
            { parensNestingLevel++;
        if (parensNestingLevel == 1) {
            return LPARENTH;
        }
            }
          // fall through
          case 76: break;
          case 16:
            { parensNestingLevel--;
        if (parensNestingLevel == 0) {
            yyPushState(IN_CSS_DECLARATION_START);
            return RPARENTH;
        }
            }
          // fall through
          case 77: break;
          case 17:
            { return CSS_PROPERTIES;
            }
          // fall through
          case 78: break;
          case 18:
            { return SCRIPT_FUNCTION_DECL;
            }
          // fall through
          case 79: break;
          case 19:
            { return SCRIPT_BODY;
            }
          // fall through
          case 80: break;
          case 20:
            { yypushback(1);
        yyPushState(YYINITIAL);
        return RBRACE;
            }
          // fall through
          case 81: break;
          case 21:
            { return GO_EXPR;
            }
          // fall through
          case 82: break;
          case 22:
            { braceNestingLevel++;
        if (braceNestingLevel == 1) {
            return LBRACE;
        }
            }
          // fall through
          case 83: break;
          case 23:
            { braceNestingLevel--;
        if (braceNestingLevel == 0) {
            yyPushState(IN_TEMPL_DECLARATION_BODY);
            return RBRACE;
        }
            }
          // fall through
          case 84: break;
          case 24:
            { yyPushState(IN_TEMPL_DECLARATION_BODY);
        return COMPONENT_REFERENCE;
            }
          // fall through
          case 85: break;
          case 25:
            { return COMPONENT_IMPORT_START;
            }
          // fall through
          case 86: break;
          case 26:
            { return GO_COMPONENT_IMPORT_PARAMS;
            }
          // fall through
          case 87: break;
          case 27:
            { parensNestingLevel--;
        if (parensNestingLevel == 0) {
            yypushback(1);
            yyPushState(IN_COMPONENT_IMPORT_PARAMS_END_WITHOUT_CHILDREN);
        }
            }
          // fall through
          case 88: break;
          case 28:
            { yyPushState(IN_TEMPL_DECLARATION_BODY);
        return RPARENTH;
            }
          // fall through
          case 89: break;
          case 29:
            { return RPARENTH;
            }
          // fall through
          case 90: break;
          case 30:
            { yyPushState(IN_TEMPL_DECLARATION_BODY);
        return LBRACE;
            }
          // fall through
          case 91: break;
          case 31:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 92: break;
          case 32:
            { /* consume characters until string is terminated */
            }
          // fall through
          case 93: break;
          case 33:
            { yyPopState();
            }
          // fall through
          case 94: break;
          case 34:
            { if (isCommentEnabled()) {
        yyPushState(IN_BLOCK_COMMENT);
        return BLOCK_COMMENT;
    }
    yypushback(yylength() - 1);
            }
          // fall through
          case 95: break;
          case 35:
            { if (isCommentEnabled()) {
        return LINE_COMMENT;
    }
    yypushback(yylength() - 1);
            }
          // fall through
          case 96: break;
          case 36:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yyPushState(IN_TEMPL_DECLARATION_BODY);
        return LBRACE;
            }
          // fall through
          case 97: break;
          case 37:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yyPushState(IN_CSS_DECLARATION_BODY);
        return LBRACE;
            }
          // fall through
          case 98: break;
          case 38:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yyPushState(IN_SCRIPT_DECLARATION_BODY);
        return SCRIPT_FUNCTION_DECL;
            }
          // fall through
          case 99: break;
          case 39:
            { yypushback(1);
        yyPushState(IN_COMPONENT_IMPORT_PARAMS);
        return COMPONENT_REFERENCE;
            }
          // fall through
          case 100: break;
          case 40:
            { parensNestingLevel--;
        if (parensNestingLevel == 0) {
            yypushback(yylength());
            yyPushState(IN_COMPONENT_IMPORT_CHILDREN_BLOCK_START);
        }
            }
          // fall through
          case 101: break;
          case 41:
            { yyPopState();
        return BLOCK_COMMENT;
            }
          // fall through
          case 102: break;
          case 42:
            { /* ignore escaped quotes */
            }
          // fall through
          case 103: break;
          case 43:
            { yyPushState(IN_CSS_DECLARATION_START);
        return CSS_DECL_START;
            }
          // fall through
          case 104: break;
          case 44:
            { yypushback(1); // IN_EXPR handles brace nesting
        yyPushState(IN_BOOL_EXPR);
        return BOOL_EXPR_START;
            }
          // fall through
          case 105: break;
          case 45:
            { yyPopState();
        return HTML_FRAGMENT;
            }
          // fall through
          case 106: break;
          case 46:
            { yyPushState(IN_HTML_COMMENT);
        return HTML_FRAGMENT;
            }
          // fall through
          case 107: break;
          case 47:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_IF_START_FRAGMENT;
            }
          // fall through
          case 108: break;
          case 48:
            { yyPushState(IN_TEMPL_DECLARATION_START);
        return HTML_DECL_START;
            }
          // fall through
          case 109: break;
          case 49:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_IF_START_FRAGMENT;
            }
          // fall through
          case 110: break;
          case 50:
            { yyPushState(IN_SCRIPT_DECLARATION_START);
        return SCRIPT_DECL_START;
            }
          // fall through
          case 111: break;
          case 51:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_CASE_FRAGMENT;
            }
          // fall through
          case 112: break;
          case 52:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_FOR_START_FRAGMENT;
            }
          // fall through
          case 113: break;
          case 53:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_ELSE_START_FRAGMENT;
            }
          // fall through
          case 114: break;
          case 54:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_CASE_FRAGMENT;
            }
          // fall through
          case 115: break;
          case 55:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_FOR_START_FRAGMENT;
            }
          // fall through
          case 116: break;
          case 56:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_ELSE_START_FRAGMENT;
            }
          // fall through
          case 117: break;
          case 57:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_DEFAULT_FRAGMENT;
            }
          // fall through
          case 118: break;
          case 58:
            { return GO_SWITCH_START_FRAGMENT;
            }
          // fall through
          case 119: break;
          case 59:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_ELSE_IF_START_FRAGMENT;
            }
          // fall through
          case 120: break;
          case 60:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_DEFAULT_FRAGMENT;
            }
          // fall through
          case 121: break;
          case 61:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_ELSE_IF_START_FRAGMENT;
            }
          // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
