// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _TemplLexer.flex

package com.templ.templ.parsing;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;import q.H.H.I;

import static com.intellij.psi.TokenType.*;
import static com.templ.templ.psi.TemplTypes.*;


public class _TemplLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_TEMPL_DECLARATION_START = 2;
  public static final int IN_TEMPL_DECLARATION_BODY = 4;
  public static final int IN_TEMPL_DECLARATION_END = 6;
  public static final int IN_CSS_DECLARATION_START = 8;
  public static final int IN_CSS_DECLARATION_PARAMS = 10;
  public static final int IN_CSS_DECLARATION_BODY = 12;
  public static final int IN_CSS_DECLARATION_END = 14;
  public static final int IN_SCRIPT_DECLARATION_START = 16;
  public static final int IN_SCRIPT_DECLARATION_BODY = 18;
  public static final int IN_SCRIPT_DECLARATION_END = 20;
  public static final int IN_TEMPL_BLOCK_END = 22;
  public static final int IN_BOOL_EXPR = 24;
  public static final int IN_EXPR = 26;
  public static final int IN_IF_STMT = 28;
  public static final int IN_ELSE_IF_STMT = 30;
  public static final int IN_ELSE_STMT = 32;
  public static final int IN_SWITCH_STMT = 34;
  public static final int IN_CASE_STMT = 36;
  public static final int IN_DEFAULT_STMT = 38;
  public static final int IN_FOR_STMT = 40;
  public static final int IN_COMPONENT_IMPORT = 42;
  public static final int IN_COMPONENT_IMPORT_PARAMS = 44;
  public static final int IN_COMPONENT_IMPORT_PARAMS_END_WITHOUT_CHILDREN = 46;
  public static final int IN_COMPONENT_IMPORT_CHILDREN_BLOCK_START = 48;
  public static final int IN_END_RBRACE = 50;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  3,  4,  5,  6,  6,  7,  8,  9,  9,  0, 10,  6,  6, 
    11, 12,  0, 13,  6,  6, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 
    19, 19, 20, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 
    28, 28, 14, 14
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\7\0"+
    "\1\6\1\7\4\0\1\10\1\0\12\11\1\12\2\0"+
    "\1\13\1\14\1\15\1\16\32\11\4\0\1\11\1\0"+
    "\1\17\1\11\1\20\1\21\1\22\1\23\1\11\1\24"+
    "\1\25\2\11\1\26\1\27\1\11\1\30\1\31\1\11"+
    "\1\32\1\33\1\34\1\35\1\11\1\36\3\11\1\37"+
    "\1\0\1\40\7\0\1\3\32\0\1\1\11\0\1\11"+
    "\12\0\1\11\4\0\1\11\5\0\27\11\1\0\37\11"+
    "\1\0\u01ca\11\4\0\14\11\16\0\5\11\7\0\1\11"+
    "\1\0\1\11\21\0\165\11\1\0\2\11\2\0\4\11"+
    "\1\0\1\11\6\0\1\11\1\0\3\11\1\0\1\11"+
    "\1\0\24\11\1\0\123\11\1\0\213\11\1\0\255\11"+
    "\1\0\46\11\2\0\1\11\6\0\51\11\10\0\55\11"+
    "\1\0\1\11\1\0\2\11\1\0\2\11\1\0\1\11"+
    "\10\0\33\11\4\0\4\11\35\0\13\11\5\0\112\11"+
    "\4\0\146\11\1\0\10\11\2\0\12\11\1\0\23\11"+
    "\2\0\1\11\20\0\73\11\2\0\145\11\16\0\66\11"+
    "\4\0\1\11\2\0\1\11\2\0\56\11\22\0\34\11"+
    "\4\0\13\11\65\0\25\11\1\0\10\11\25\0\17\11"+
    "\1\0\201\11\2\0\12\11\1\0\23\11\1\0\10\11"+
    "\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11"+
    "\3\0\4\11\2\0\11\11\2\0\2\11\2\0\4\11"+
    "\10\0\1\11\4\0\2\11\1\0\5\11\2\0\14\11"+
    "\12\0\1\11\1\0\1\11\2\0\3\11\1\0\6\11"+
    "\4\0\2\11\2\0\26\11\1\0\7\11\1\0\2\11"+
    "\1\0\2\11\1\0\2\11\2\0\1\11\1\0\5\11"+
    "\4\0\2\11\2\0\3\11\3\0\1\11\7\0\4\11"+
    "\1\0\1\11\7\0\20\11\13\0\3\11\1\0\11\11"+
    "\1\0\3\11\1\0\26\11\1\0\7\11\1\0\2\11"+
    "\1\0\5\11\2\0\12\11\1\0\3\11\1\0\3\11"+
    "\2\0\1\11\17\0\4\11\2\0\12\11\11\0\7\11"+
    "\1\0\3\11\1\0\10\11\2\0\2\11\2\0\26\11"+
    "\1\0\7\11\1\0\2\11\1\0\5\11\2\0\11\11"+
    "\2\0\2\11\2\0\3\11\10\0\2\11\4\0\2\11"+
    "\1\0\5\11\2\0\12\11\1\0\1\11\20\0\2\11"+
    "\1\0\6\11\3\0\3\11\1\0\4\11\3\0\2\11"+
    "\1\0\1\11\1\0\2\11\3\0\2\11\3\0\3\11"+
    "\3\0\14\11\4\0\5\11\3\0\3\11\1\0\4\11"+
    "\2\0\1\11\6\0\1\11\16\0\12\11\20\0\15\11"+
    "\1\0\3\11\1\0\27\11\1\0\20\11\3\0\10\11"+
    "\1\0\3\11\1\0\4\11\7\0\2\11\1\0\3\11"+
    "\5\0\4\11\2\0\12\11\20\0\4\11\1\0\10\11"+
    "\1\0\3\11\1\0\27\11\1\0\12\11\1\0\5\11"+
    "\2\0\11\11\1\0\3\11\1\0\4\11\7\0\2\11"+
    "\7\0\1\11\1\0\4\11\2\0\12\11\1\0\2\11"+
    "\15\0\4\11\1\0\10\11\1\0\3\11\1\0\63\11"+
    "\1\0\3\11\1\0\5\11\5\0\4\11\7\0\5\11"+
    "\2\0\12\11\12\0\6\11\2\0\2\11\1\0\22\11"+
    "\3\0\30\11\1\0\11\11\1\0\1\11\2\0\7\11"+
    "\3\0\1\11\4\0\6\11\1\0\1\11\1\0\10\11"+
    "\6\0\12\11\2\0\2\11\15\0\72\11\5\0\17\11"+
    "\1\0\12\11\47\0\2\11\1\0\1\11\1\0\5\11"+
    "\1\0\30\11\1\0\1\11\1\0\27\11\2\0\5\11"+
    "\1\0\1\11\1\0\6\11\2\0\12\11\2\0\4\11"+
    "\40\0\1\11\27\0\2\11\6\0\12\11\13\0\1\11"+
    "\1\0\1\11\1\0\1\11\4\0\12\11\1\0\44\11"+
    "\4\0\24\11\1\0\22\11\1\0\44\11\11\0\1\11"+
    "\71\0\112\11\6\0\116\11\2\0\46\11\1\0\1\11"+
    "\5\0\1\11\2\0\53\11\1\0\115\11\1\0\4\11"+
    "\2\0\7\11\1\0\1\11\1\0\4\11\2\0\51\11"+
    "\1\0\4\11\2\0\41\11\1\0\4\11\2\0\7\11"+
    "\1\0\1\11\1\0\4\11\2\0\17\11\1\0\71\11"+
    "\1\0\4\11\2\0\103\11\2\0\3\11\40\0\20\11"+
    "\20\0\126\11\2\0\6\11\3\0\u016c\11\2\0\21\11"+
    "\1\1\32\11\5\0\113\11\3\0\13\11\7\0\15\11"+
    "\1\0\7\11\13\0\25\11\13\0\24\11\14\0\15\11"+
    "\1\0\3\11\1\0\2\11\14\0\124\11\3\0\1\11"+
    "\4\0\2\11\2\0\12\11\41\0\3\11\2\0\12\11"+
    "\6\0\131\11\7\0\53\11\5\0\106\11\12\0\37\11"+
    "\1\0\14\11\4\0\14\11\12\0\50\11\2\0\5\11"+
    "\13\0\54\11\4\0\32\11\6\0\12\11\46\0\34\11"+
    "\4\0\77\11\1\0\35\11\2\0\13\11\6\0\12\11"+
    "\15\0\1\11\10\0\17\11\101\0\114\11\4\0\12\11"+
    "\21\0\11\11\14\0\164\11\14\0\70\11\10\0\12\11"+
    "\3\0\61\11\2\0\11\11\7\0\53\11\2\0\3\11"+
    "\20\0\3\11\1\0\47\11\5\0\372\11\1\0\33\11"+
    "\2\0\6\11\2\0\46\11\2\0\6\11\2\0\10\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\37\11"+
    "\2\0\65\11\1\0\7\11\1\0\1\11\3\0\3\11"+
    "\1\0\7\11\3\0\4\11\2\0\6\11\4\0\15\11"+
    "\5\0\3\11\1\0\7\11\3\0\13\1\35\0\2\3"+
    "\5\0\1\1\17\0\2\11\23\0\1\11\12\0\1\1"+
    "\21\0\1\11\15\0\1\11\20\0\15\11\63\0\41\11"+
    "\21\0\1\11\4\0\1\11\2\0\12\11\1\0\1\11"+
    "\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\4\11\1\0\13\11\2\0\4\11\5\0\5\11"+
    "\4\0\1\11\21\0\51\11\u022d\0\64\11\26\0\57\11"+
    "\1\0\57\11\1\0\205\11\6\0\11\11\14\0\46\11"+
    "\1\0\1\11\5\0\1\11\2\0\70\11\7\0\1\11"+
    "\17\0\30\11\11\0\7\11\1\0\7\11\1\0\7\11"+
    "\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11"+
    "\1\0\7\11\1\0\40\11\57\0\1\11\320\0\1\1"+
    "\4\0\3\11\31\0\17\11\1\0\5\11\2\0\5\11"+
    "\4\0\126\11\2\0\2\11\2\0\3\11\1\0\132\11"+
    "\1\0\4\11\5\0\53\11\1\0\136\11\21\0\33\11"+
    "\65\0\306\11\112\0\360\11\20\0\215\11\103\0\56\11"+
    "\2\0\15\11\3\0\34\11\24\0\63\11\1\0\12\11"+
    "\1\0\163\11\45\0\11\11\2\0\147\11\2\0\65\11"+
    "\2\0\5\11\60\0\61\11\30\0\64\11\14\0\106\11"+
    "\12\0\12\11\6\0\30\11\3\0\1\11\1\0\61\11"+
    "\2\0\44\11\14\0\35\11\3\0\101\11\16\0\13\11"+
    "\6\0\37\11\1\0\67\11\11\0\16\11\2\0\12\11"+
    "\6\0\27\11\3\0\111\11\30\0\3\11\2\0\20\11"+
    "\2\0\5\11\12\0\6\11\2\0\6\11\2\0\6\11"+
    "\11\0\7\11\1\0\7\11\1\0\53\11\1\0\14\11"+
    "\10\0\173\11\1\0\2\11\2\0\12\11\6\0\244\11"+
    "\14\0\27\11\4\0\61\11\4\0\u0100\41\156\11\2\0"+
    "\152\11\46\0\7\11\14\0\5\11\5\0\14\11\1\0"+
    "\15\11\1\0\5\11\1\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\154\11\41\0\153\11\22\0\100\11\2\0"+
    "\66\11\50\0\14\11\4\0\20\11\20\0\20\11\3\0"+
    "\2\11\30\0\3\11\40\0\5\11\1\0\207\11\23\0"+
    "\12\11\7\0\32\11\4\0\1\11\1\0\32\11\13\0"+
    "\131\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0"+
    "\3\11\43\0\14\11\1\0\32\11\1\0\23\11\1\0"+
    "\2\11\1\0\17\11\2\0\16\11\42\0\173\11\105\0"+
    "\65\11\210\0\1\11\202\0\35\11\3\0\61\11\17\0"+
    "\1\11\37\0\40\11\15\0\36\11\5\0\53\11\5\0"+
    "\36\11\2\0\44\11\4\0\10\11\1\0\5\11\52\0"+
    "\236\11\2\0\12\11\6\0\44\11\4\0\44\11\4\0"+
    "\50\11\10\0\64\11\234\0\67\11\11\0\26\11\12\0"+
    "\10\11\230\0\6\11\2\0\1\11\1\0\54\11\1\0"+
    "\2\11\3\0\1\11\2\0\27\11\12\0\27\11\11\0"+
    "\37\11\101\0\23\11\1\0\2\11\12\0\26\11\12\0"+
    "\32\11\106\0\70\11\6\0\2\11\100\0\4\11\1\0"+
    "\2\11\5\0\10\11\1\0\3\11\1\0\35\11\2\0"+
    "\3\11\4\0\1\11\40\0\35\11\3\0\35\11\43\0"+
    "\10\11\1\0\36\11\31\0\66\11\12\0\26\11\12\0"+
    "\23\11\15\0\22\11\156\0\111\11\67\0\63\11\15\0"+
    "\63\11\15\0\50\11\10\0\12\11\306\0\35\11\12\0"+
    "\1\11\10\0\41\11\217\0\27\11\11\0\107\11\37\0"+
    "\12\11\17\0\74\11\25\0\31\11\7\0\12\11\6\0"+
    "\65\11\1\0\12\11\4\0\3\11\11\0\44\11\2\0"+
    "\1\11\11\0\105\11\4\0\4\11\3\0\13\11\1\0"+
    "\1\11\43\0\22\11\1\0\45\11\6\0\1\11\101\0"+
    "\7\11\1\0\1\11\1\0\4\11\1\0\17\11\1\0"+
    "\12\11\7\0\73\11\5\0\12\11\6\0\4\11\1\0"+
    "\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0"+
    "\2\11\1\0\5\11\1\0\12\11\2\0\2\11\2\0"+
    "\3\11\2\0\1\11\6\0\1\11\5\0\7\11\2\0"+
    "\7\11\3\0\5\11\213\0\113\11\5\0\12\11\4\0"+
    "\2\11\40\0\106\11\1\0\1\11\10\0\12\11\246\0"+
    "\66\11\2\0\11\11\27\0\6\11\42\0\101\11\3\0"+
    "\1\11\13\0\12\11\46\0\71\11\7\0\12\11\66\0"+
    "\33\11\2\0\17\11\4\0\12\11\306\0\73\11\145\0"+
    "\112\11\25\0\1\11\240\0\10\11\2\0\56\11\2\0"+
    "\10\11\1\0\2\11\33\0\77\11\10\0\1\11\10\0"+
    "\112\11\3\0\1\11\42\0\71\11\7\0\11\11\1\0"+
    "\55\11\1\0\11\11\17\0\12\11\30\0\36\11\2\0"+
    "\26\11\1\0\16\11\111\0\7\11\1\0\2\11\1\0"+
    "\54\11\3\0\1\11\1\0\2\11\1\0\11\11\10\0"+
    "\12\11\6\0\6\11\1\0\2\11\1\0\45\11\1\0"+
    "\2\11\1\0\6\11\7\0\12\11\u0136\0\27\11\11\0"+
    "\232\11\146\0\157\11\21\0\304\11\274\0\57\11\321\0"+
    "\107\11\271\0\71\11\7\0\37\11\1\0\12\11\146\0"+
    "\36\11\2\0\5\11\13\0\67\11\11\0\4\11\14\0"+
    "\12\11\11\0\25\11\5\0\23\11\260\0\100\11\200\0"+
    "\113\11\4\0\71\11\7\0\21\11\100\0\2\11\1\0"+
    "\1\11\34\0\370\11\10\0\363\11\15\0\37\11\61\0"+
    "\3\11\21\0\4\11\10\0\u018c\11\4\0\153\11\5\0"+
    "\15\11\3\0\11\11\7\0\12\11\3\0\2\11\306\0"+
    "\5\11\3\0\6\11\10\0\10\11\2\0\7\11\36\0"+
    "\4\11\224\0\3\11\273\0\125\11\1\0\107\11\1\0"+
    "\2\11\2\0\1\11\2\0\2\11\2\0\4\11\1\0"+
    "\14\11\1\0\1\11\1\0\7\11\1\0\101\11\1\0"+
    "\4\11\2\0\10\11\1\0\7\11\1\0\34\11\1\0"+
    "\4\11\1\0\5\11\1\0\1\11\3\0\7\11\1\0"+
    "\u0154\11\2\0\31\11\1\0\31\11\1\0\37\11\1\0"+
    "\31\11\1\0\37\11\1\0\31\11\1\0\37\11\1\0"+
    "\31\11\1\0\37\11\1\0\31\11\1\0\10\11\2\0"+
    "\151\11\4\0\62\11\10\0\1\11\16\0\1\11\26\0"+
    "\5\11\1\0\17\11\120\0\7\11\1\0\21\11\2\0"+
    "\7\11\1\0\2\11\1\0\5\11\325\0\55\11\3\0"+
    "\16\11\2\0\12\11\4\0\1\11\u0171\0\72\11\6\0"+
    "\305\11\13\0\7\11\51\0\114\11\4\0\12\11\246\0"+
    "\4\11\1\0\33\11\1\0\2\11\1\0\1\11\2\0"+
    "\1\11\1\0\12\11\1\0\4\11\1\0\1\11\1\0"+
    "\1\11\6\0\1\11\4\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\0\2\11\1\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\2\11\1\0\1\11\2\0\4\11\1\0"+
    "\7\11\1\0\4\11\1\0\4\11\1\0\1\11\1\0"+
    "\12\11\1\0\21\11\5\0\3\11\1\0\5\11\1\0"+
    "\21\11\164\0\32\11\6\0\32\11\6\0\32\11\166\0"+
    "\327\11\51\0\65\11\13\0\336\11\2\0\u0182\11\16\0"+
    "\u0131\11\37\0\36\11\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\35\0\10\1\1\2\1\3\1\1\1\4\5\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\6\1\13"+
    "\1\14\1\15\1\16\2\1\1\17\1\20\1\6\1\21"+
    "\1\22\12\1\1\23\1\24\1\25\1\26\1\27\3\0"+
    "\2\30\16\0\1\31\1\0\2\32\1\13\2\33\1\0"+
    "\1\34\1\0\2\35\1\0\2\36\1\0\2\37\1\0"+
    "\2\40\6\0\2\41\2\0\2\42\1\43\1\0\1\44"+
    "\1\45\3\0\1\46\3\0\1\47\1\0\1\50\1\0"+
    "\1\51\1\52\1\53\1\54\2\0\1\55\1\0\1\56"+
    "\4\0\1\57\3\0\1\60\3\0\1\61\1\62\1\63"+
    "\5\0\1\64\2\0\1\65\1\66\6\0\1\67\1\70"+
    "\1\71\1\0\2\72\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u01fe"+
    "\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec\0\u030e"+
    "\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da\0\u03fc\0\u041e"+
    "\0\u0440\0\u0462\0\u0484\0\u04a6\0\u04c8\0\u03da\0\u04ea\0\u050c"+
    "\0\u03da\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6\0\u04ea\0\u03da"+
    "\0\u03da\0\u05d8\0\u03da\0\u03da\0\u05fa\0\u061c\0\u063e\0\u03da"+
    "\0\u03da\0\u03da\0\u0660\0\u0682\0\u03da\0\u03da\0\u06a4\0\u03da"+
    "\0\u03da\0\u06c6\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770\0\u0792"+
    "\0\u07b4\0\u07d6\0\u07f8\0\u081a\0\u03da\0\u083c\0\u03da\0\u03da"+
    "\0\u085e\0\u0880\0\u08a2\0\u03da\0\u08c4\0\u08e6\0\u04a6\0\u0908"+
    "\0\u04ea\0\u092a\0\u050c\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6"+
    "\0\u094c\0\u096e\0\u0990\0\u03da\0\u09b2\0\u03da\0\u09d4\0\u09f6"+
    "\0\u03da\0\u0a18\0\u0a3a\0\u03da\0\u06c6\0\u06c6\0\u0a5c\0\u06e8"+
    "\0\u06e8\0\u0a7e\0\u070a\0\u070a\0\u0aa0\0\u072c\0\u072c\0\u0ac2"+
    "\0\u074e\0\u0770\0\u0792\0\u0ae4\0\u0b06\0\u07b4\0\u07b4\0\u0b28"+
    "\0\u0b4a\0\u07f8\0\u07f8\0\u0b6c\0\u03da\0\u083c\0\u03da\0\u03da"+
    "\0\u0b8e\0\u0bb0\0\u0bd2\0\u03da\0\u0bf4\0\u0c16\0\u0c38\0\u03da"+
    "\0\u0c5a\0\u05fa\0\u0c7c\0\u06c6\0\u06e8\0\u070a\0\u072c\0\u0c9e"+
    "\0\u0cc0\0\u07b4\0\u0ce2\0\u07f8\0\u0d04\0\u0d26\0\u0d48\0\u0d6a"+
    "\0\u03da\0\u0d8c\0\u0dae\0\u0dd0\0\u03da\0\u0df2\0\u0e14\0\u0e36"+
    "\0\u03da\0\u03da\0\u0e58\0\u0e7a\0\u0e9c\0\u0ebe\0\u0ee0\0\u0f02"+
    "\0\u03da\0\u0f24\0\u0f46\0\u03da\0\u03da\0\u0f68\0\u0f8a\0\u0fac"+
    "\0\u0fce\0\u0ff0\0\u1012\0\u03da\0\u03da\0\u03da\0\u1034\0\u1034"+
    "\0\u1056\0\u1034";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\62\36\1\37\12\36\1\40\1\41\44\36\1\42\36\36"+
    "\1\43\2\36\1\42\16\36\1\44\1\45\21\36\1\46"+
    "\1\47\2\36\5\50\6\36\1\44\1\45\1\51\1\36"+
    "\1\52\1\53\1\36\1\54\1\36\1\55\5\36\1\56"+
    "\3\36\1\46\1\57\1\36\2\60\3\0\33\60\1\61"+
    "\1\0\1\60\5\62\1\63\1\64\1\60\1\65\5\60"+
    "\20\65\1\66\1\60\1\0\1\60\5\62\1\63\1\64"+
    "\1\60\1\65\5\60\1\65\1\67\16\65\1\66\1\60"+
    "\1\0\6\36\1\70\1\71\72\36\1\72\40\36\1\73"+
    "\35\36\1\74\3\36\1\73\42\36\1\75\1\36\2\60"+
    "\3\0\33\60\1\76\1\0\2\60\3\0\10\60\1\77"+
    "\23\60\1\0\37\36\1\100\1\101\40\36\1\102\41\36"+
    "\1\103\41\36\1\104\41\36\1\105\3\36\5\106\12\36"+
    "\1\107\1\110\15\36\1\105\14\36\1\111\50\36\1\112"+
    "\57\36\1\113\2\36\2\60\3\0\3\60\2\114\4\60"+
    "\1\115\20\114\2\60\1\0\6\36\1\70\1\116\32\36"+
    "\2\60\3\0\2\60\1\117\31\60\1\0\1\60\5\62"+
    "\1\60\1\64\27\60\1\120\1\60\76\0\1\121\26\0"+
    "\1\122\43\0\1\123\21\0\2\124\1\125\57\0\1\126"+
    "\20\0\5\127\10\0\1\51\36\0\1\130\27\0\5\131"+
    "\14\0\1\132\20\0\5\133\10\0\1\51\1\0\1\134"+
    "\1\135\1\0\1\136\1\0\1\137\5\0\1\140\25\0"+
    "\1\141\44\0\1\142\47\0\1\143\34\0\1\144\54\0"+
    "\1\145\4\0\5\62\45\0\1\65\5\0\20\65\5\0"+
    "\2\146\1\147\46\0\1\65\5\0\14\65\1\150\3\65"+
    "\5\0\2\151\1\152\55\0\1\153\34\0\1\154\27\0"+
    "\1\155\2\156\1\157\1\155\35\0\1\160\2\161\1\162"+
    "\1\160\35\0\1\163\2\164\1\165\1\163\35\0\1\166"+
    "\2\167\1\170\1\166\35\0\5\171\12\0\1\172\1\173"+
    "\37\0\1\174\44\0\1\175\20\0\1\176\2\177\1\200"+
    "\1\176\56\0\1\201\20\0\1\202\2\203\1\204\1\202"+
    "\42\0\1\205\1\0\2\114\5\0\20\114\4\0\5\206"+
    "\31\0\1\207\35\0\1\210\40\0\1\211\36\0\1\212"+
    "\14\0\1\124\66\0\1\213\51\0\1\214\30\0\1\215"+
    "\46\0\1\216\31\0\1\217\50\0\1\220\34\0\1\221"+
    "\16\0\1\146\50\0\1\65\5\0\14\65\1\222\3\65"+
    "\5\0\1\151\71\0\1\223\10\0\1\155\1\224\1\156"+
    "\1\157\1\155\35\0\1\160\1\225\1\161\1\162\1\160"+
    "\35\0\1\163\1\226\1\164\1\165\1\163\35\0\1\166"+
    "\1\227\1\167\1\170\1\166\67\0\1\230\31\0\1\231"+
    "\17\0\1\176\1\232\1\177\1\200\1\176\57\0\1\233"+
    "\17\0\1\202\1\234\1\203\1\204\1\202\61\0\1\235"+
    "\45\0\1\236\41\0\1\237\43\0\1\240\30\0\1\241"+
    "\36\0\1\242\56\0\1\243\32\0\1\244\36\0\1\245"+
    "\36\0\1\246\41\0\1\247\53\0\1\250\36\0\1\251"+
    "\41\0\1\252\35\0\1\253\54\0\1\254\24\0\1\255"+
    "\52\0\1\256\45\0\1\257\41\0\1\260\40\0\1\261"+
    "\12\0\1\262\62\0\1\263\37\0\1\264\51\0\1\265"+
    "\33\0\1\266\41\0\1\267\40\0\1\270\50\0\1\271"+
    "\41\0\1\272\41\0\1\273\30\0\1\274\30\0\1\275"+
    "\41\0\1\276\41\0\1\277\30\0\1\277\2\300\1\301"+
    "\1\277\35\0\1\277\1\302\1\300\1\301\1\277\34\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4216];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\35\0\1\11\7\1\1\11\2\1\1\11\6\1\2\11"+
    "\1\1\2\11\3\1\3\11\2\1\2\11\1\1\2\11"+
    "\13\1\1\11\1\1\2\11\3\0\1\11\1\1\16\0"+
    "\1\11\1\0\1\11\2\1\1\11\1\1\1\0\1\11"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\6\0\2\1\2\0\2\1\1\11\1\0\2\11\3\0"+
    "\1\11\3\0\1\11\1\0\1\1\1\0\4\1\2\0"+
    "\1\1\1\0\1\1\4\0\1\11\3\0\1\11\3\0"+
    "\2\11\1\1\5\0\1\11\2\0\2\11\6\0\3\11"+
    "\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private boolean atEndOfFile = false;
    private int braceNestingLevel = 0;
    private int parensNestingLevel = 0;

    public _TemplLexer() {
        this((java.io.Reader)null);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TemplLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              // Without this atEndFile, we get an infinite loop that leads to OOM.
        if (this.atEndOfFile) {
            return null;
        } else {
            this.atEndOfFile = true;
            return GO_ROOT_FRAGMENT;
        }
            }  // fall though
            case 195: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* capture characters until we emit a token */
            }
          // fall through
          case 60: break;
          case 2:
            { yypushback(1);
        yybegin(IN_EXPR);
        return HTML_FRAGMENT;
            }
          // fall through
          case 61: break;
          case 3:
            { yypushback(1);
        yybegin(IN_TEMPL_BLOCK_END);
        return HTML_FRAGMENT;
            }
          // fall through
          case 62: break;
          case 4:
            { yypushback(1);
        yybegin(IN_COMPONENT_IMPORT);
        return HTML_FRAGMENT;
            }
          // fall through
          case 63: break;
          case 5:
            { yypushback(1);
        yybegin(IN_TEMPL_DECLARATION_END);
        return HTML_FRAGMENT;
            }
          // fall through
          case 64: break;
          case 6:
            { return BAD_CHARACTER;
            }
          // fall through
          case 65: break;
          case 7:
            { yybegin(YYINITIAL);
        return RBRACE;
            }
          // fall through
          case 66: break;
          case 8:
            { return WHITE_SPACE;
            }
          // fall through
          case 67: break;
          case 9:
            { yypushback(1);
        yybegin(IN_CSS_DECLARATION_PARAMS);
            }
          // fall through
          case 68: break;
          case 10:
            { return RPARENTH;
            }
          // fall through
          case 69: break;
          case 11:
            { return CSS_CLASS_ID;
            }
          // fall through
          case 70: break;
          case 12:
            { parensNestingLevel++;
        if (parensNestingLevel == 1) {
            return LPARENTH;
        }
            }
          // fall through
          case 71: break;
          case 13:
            { parensNestingLevel--;
        if (parensNestingLevel == 0) {
            yypushback(1);
            yybegin(IN_CSS_DECLARATION_START);
            return GO_CSS_DECL_PARAMS;
        }
            }
          // fall through
          case 72: break;
          case 14:
            { yypushback(1);
        yybegin(IN_CSS_DECLARATION_END);
        return CSS_PROPERTIES;
            }
          // fall through
          case 73: break;
          case 15:
            { yypushback(1);
        yybegin(IN_SCRIPT_DECLARATION_END);
        return SCRIPT_BODY;
            }
          // fall through
          case 74: break;
          case 16:
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return RBRACE;
            }
          // fall through
          case 75: break;
          case 17:
            { braceNestingLevel++;
        if (braceNestingLevel == 1) {
            return LBRACE;
        }
            }
          // fall through
          case 76: break;
          case 18:
            { braceNestingLevel--;
        if (braceNestingLevel == 0) {
            yypushback(1);
            yybegin(IN_END_RBRACE);
            return GO_EXPR;
        }
            }
          // fall through
          case 77: break;
          case 19:
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return COMPONENT_REFERENCE;
            }
          // fall through
          case 78: break;
          case 20:
            { return COMPONENT_IMPORT_START;
            }
          // fall through
          case 79: break;
          case 21:
            { parensNestingLevel--;
        if (parensNestingLevel == 0) {
            yypushback(1);
            yybegin(IN_COMPONENT_IMPORT_PARAMS_END_WITHOUT_CHILDREN);
            return GO_COMPONENT_IMPORT_PARAMS;
        }
            }
          // fall through
          case 80: break;
          case 22:
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return RPARENTH;
            }
          // fall through
          case 81: break;
          case 23:
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return LBRACE;
            }
          // fall through
          case 82: break;
          case 24:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return DECL_GO_TOKEN;
            }
          // fall through
          case 83: break;
          case 25:
            { yypushback(2);
        yybegin(IN_IF_STMT);
        return HTML_FRAGMENT;
            }
          // fall through
          case 84: break;
          case 26:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(IN_CSS_DECLARATION_BODY);
        return LBRACE;
            }
          // fall through
          case 85: break;
          case 27:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(IN_SCRIPT_DECLARATION_BODY);
        return SCRIPT_FUNCTION_DECL;
            }
          // fall through
          case 86: break;
          case 28:
            { yybegin(IN_EXPR);
        return BOOL_EXPR_START;
            }
          // fall through
          case 87: break;
          case 29:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_IF_START_FRAGMENT;
            }
          // fall through
          case 88: break;
          case 30:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_ELSE_IF_START_FRAGMENT;
            }
          // fall through
          case 89: break;
          case 31:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_ELSE_START_FRAGMENT;
            }
          // fall through
          case 90: break;
          case 32:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_SWITCH_START_FRAGMENT;
            }
          // fall through
          case 91: break;
          case 33:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_CASE_FRAGMENT;
            }
          // fall through
          case 92: break;
          case 34:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_FOR_START_FRAGMENT;
            }
          // fall through
          case 93: break;
          case 35:
            { yypushback(1);
        yybegin(IN_COMPONENT_IMPORT_PARAMS);
        return COMPONENT_REFERENCE;
            }
          // fall through
          case 94: break;
          case 36:
            { parensNestingLevel--;
        if (parensNestingLevel == 0) {
            yypushback(yylength());
            yybegin(IN_COMPONENT_IMPORT_CHILDREN_BLOCK_START);
            return GO_COMPONENT_IMPORT_PARAMS;
        }
            }
          // fall through
          case 95: break;
          case 37:
            { yypushback(3); // reverse back to start of "templ"
        yybegin(IN_CSS_DECLARATION_START);
        return GO_ROOT_FRAGMENT;
            }
          // fall through
          case 96: break;
          case 38:
            { yypushback(3);
        yybegin(IN_BOOL_EXPR);
        return HTML_FRAGMENT;
            }
          // fall through
          case 97: break;
          case 39:
            { yypushback(3);
        yybegin(IN_FOR_STMT);
        return HTML_FRAGMENT;
            }
          // fall through
          case 98: break;
          case 40:
            { return CSS_DECL_START;
            }
          // fall through
          case 99: break;
          case 41:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_IF_START_FRAGMENT;
            }
          // fall through
          case 100: break;
          case 42:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_ELSE_IF_START_FRAGMENT;
            }
          // fall through
          case 101: break;
          case 43:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_ELSE_START_FRAGMENT;
            }
          // fall through
          case 102: break;
          case 44:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_SWITCH_START_FRAGMENT;
            }
          // fall through
          case 103: break;
          case 45:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_CASE_FRAGMENT;
            }
          // fall through
          case 104: break;
          case 46:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_FOR_START_FRAGMENT;
            }
          // fall through
          case 105: break;
          case 47:
            { yypushback(4);
        yybegin(IN_CASE_STMT);
        return HTML_FRAGMENT;
            }
          // fall through
          case 106: break;
          case 48:
            { yypushback(4);
        yybegin(IN_CASE_STMT);
            }
          // fall through
          case 107: break;
          case 49:
            { yypushback(5); // reverse back to start of "templ"
        yybegin(IN_TEMPL_DECLARATION_START);
        return GO_ROOT_FRAGMENT;
            }
          // fall through
          case 108: break;
          case 50:
            { return HTML_DECL_START;
            }
          // fall through
          case 109: break;
          case 51:
            { yypushback(yylength());
        yybegin(IN_ELSE_STMT);
        return HTML_FRAGMENT;
            }
          // fall through
          case 110: break;
          case 52:
            { yypushback(6); // reverse back to start of "templ"
        yybegin(IN_SCRIPT_DECLARATION_START);
        return GO_ROOT_FRAGMENT;
            }
          // fall through
          case 111: break;
          case 53:
            { yypushback(6);
        yybegin(IN_SWITCH_STMT);
        return HTML_FRAGMENT;
            }
          // fall through
          case 112: break;
          case 54:
            { return SCRIPT_DECL_START;
            }
          // fall through
          case 113: break;
          case 55:
            { yypushback(yylength());
        yybegin(IN_ELSE_IF_STMT);
        return HTML_FRAGMENT;
            }
          // fall through
          case 114: break;
          case 56:
            { yypushback(8);
        yybegin(IN_DEFAULT_STMT);
        return HTML_FRAGMENT;
            }
          // fall through
          case 115: break;
          case 57:
            { yypushback(8);
        yybegin(IN_DEFAULT_STMT);
            }
          // fall through
          case 116: break;
          case 58:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_DEFAULT_FRAGMENT;
            }
          // fall through
          case 117: break;
          case 59:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yybegin(IN_TEMPL_DECLARATION_BODY);
        return GO_DEFAULT_FRAGMENT;
            }
          // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
